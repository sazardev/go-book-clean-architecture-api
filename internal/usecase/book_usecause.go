// Package usecase contiene la L√ìGICA DE NEGOCIO de la aplicaci√≥n
// Esta es la CAPA DE APLICACI√ìN de Clean Architecture
//
// üß† ¬øQu√© son los casos de uso?
// - Son las reglas de negocio espec√≠ficas de la aplicaci√≥n
// - Orquestan las operaciones entre entidades
// - Definen QU√â puede hacer el usuario en la aplicaci√≥n
// - Son independientes de frameworks, bases de datos, UI, etc.
//
// üéØ REGLAS DE ORO de los Casos de Uso:
// ‚úÖ Contienen la l√≥gica de negocio espec√≠fica de la aplicaci√≥n
// ‚úÖ Validan datos antes de procesarlos
// ‚úÖ Coordinan operaciones entre diferentes entidades
// ‚úÖ Usan las interfaces de repositorio (no implementaciones concretas)
// ‚úÖ Retornan errores de negocio significativos
//
// üö´ Los casos de uso NO deben:
// - Conocer detalles de HTTP (request/response)
// - Conocer detalles de base de datos (SQL, tablas)
// - Depender de frameworks externos
// - Manejar presentaci√≥n de datos
package usecase

import (
	"errors"
	"go-book-clean-architecture-api/internal/domain"
	"go-book-clean-architecture-api/internal/repository"

	"github.com/google/uuid"
)

// BookUseCase contiene toda la l√≥gica de negocio relacionada con los libros
//
// üìö ¬øPor qu√© separamos la l√≥gica en casos de uso?
// - Centraliza las reglas de negocio en un lugar
// - Facilita el testing (sin HTTP, sin DB)
// - Permite reutilizar la l√≥gica desde diferentes interfaces (HTTP, CLI, gRPC)
// - Hace el c√≥digo m√°s mantenible y escalable
//
// üîß Patr√≥n de Inyecci√≥n de Dependencias:
// - El caso de uso RECIBE las dependencias que necesita
// - NO crea las dependencias internamente
// - Esto facilita el testing y la flexibilidad
type BookUseCase struct {
	bookRepo repository.BookRepository // Dependencia inyectada del repositorio
}

// NewBookUseCase es el CONSTRUCTOR que implementa Dependency Injection
//
// üéØ ¬øPor qu√© usar constructores?
// - Garantizan que el objeto se crea correctamente
// - Hacen expl√≠citas las dependencias necesarias
// - Facilitan el testing (podemos inyectar mocks)
// - Siguen el principio de inversi√≥n de dependencias
//
// üí° Nota: En Go, los constructores son por convenci√≥n funciones New*
func NewBookUseCase(bookRepo repository.BookRepository) *BookUseCase {
	return &BookUseCase{
		bookRepo: bookRepo,
	}
}

// CreateBook maneja toda la l√≥gica para crear un nuevo libro
//
// üîÑ Flujo t√≠pico de un caso de uso:
// 1. Validar entrada (reglas de negocio)
// 2. Crear/modificar entidades del dominio
// 3. Llamar al repositorio para persistir
// 4. Retornar resultado o error
//
// üéØ Responsabilidades:
// ‚úÖ Validar que el t√≠tulo no est√© vac√≠o (regla de negocio)
// ‚úÖ Validar que el autor no est√© vac√≠o (regla de negocio)
// ‚úÖ Generar ID √∫nico para el libro
// ‚úÖ Crear la entidad Book
// ‚úÖ Delegar la persistencia al repositorio
func (uc *BookUseCase) CreateBook(title, author string) (*domain.Book, error) {
	// PASO 1: Validaciones de reglas de negocio
	// Estas son reglas espec√≠ficas de nuestro dominio
	if title == "" {
		return nil, errors.New("el t√≠tulo del libro es obligatorio")
	}
	if author == "" {
		return nil, errors.New("el autor del libro es obligatorio")
	}

	// PASO 2: Crear la entidad del dominio
	book := &domain.Book{
		ID:     uuid.New().String(), // Generar ID √∫nico
		Title:  title,
		Author: author,
	}

	// PASO 3: Delegar la persistencia al repositorio
	// El caso de uso NO sabe si esto se guarda en memoria, PostgreSQL, etc.
	return uc.bookRepo.Create(book)
}

// GetBookByID obtiene un libro por su ID
//
// üîç Caso de uso simple: validar entrada y delegar al repositorio
// Podr√≠amos agregar l√≥gica adicional como logging, m√©tricas, cache, etc.
func (uc *BookUseCase) GetBookByID(id string) (*domain.Book, error) {
	// Validaci√≥n de entrada
	if id == "" {
		return nil, errors.New("ID del libro es obligatorio")
	}

	// Delegar al repositorio
	return uc.bookRepo.GetByID(id)
}

// GetAllBooks obtiene todos los libros disponibles
//
// üìö En aplicaciones reales, aqu√≠ podr√≠as implementar:
// - Paginaci√≥n: GetBooks(page, limit int)
// - Filtros: GetBooksByAuthor(author string)
// - Ordenamiento: GetBooksSortedByTitle()
// - Cache: verificar cache antes de llamar al repositorio
func (uc *BookUseCase) GetAllBooks() ([]*domain.Book, error) {
	return uc.bookRepo.GetAll()
}

// UpdateBook actualiza un libro existente
//
// üîÑ L√≥gica de actualizaci√≥n:
// 1. Validar todos los campos (t√≠tulo, autor, ID)
// 2. Crear entidad con los nuevos datos
// 3. Delegar la actualizaci√≥n al repositorio
//
// üí° Nota: El repositorio se encarga de verificar si el libro existe
func (uc *BookUseCase) UpdateBook(id, title, author string) (*domain.Book, error) {
	// Validaciones de negocio
	if id == "" {
		return nil, errors.New("ID del libro es obligatorio")
	}
	if title == "" {
		return nil, errors.New("el t√≠tulo del libro es obligatorio")
	}
	if author == "" {
		return nil, errors.New("el autor del libro es obligatorio")
	}

	// Crear entidad con los datos actualizados
	book := &domain.Book{
		ID:     id,
		Title:  title,
		Author: author,
	}

	// Delegar la actualizaci√≥n al repositorio
	return uc.bookRepo.Update(book)
}

// DeleteBook elimina un libro por su ID
//
// üóëÔ∏è Operaci√≥n de eliminaci√≥n simple
// En aplicaciones reales, podr√≠as implementar:
// - Soft delete (marcar como eliminado, no borrar f√≠sicamente)
// - Verificaciones adicionales (¬øel libro est√° prestado?)
// - Logging de auditor√≠a
func (uc *BookUseCase) DeleteBook(id string) error {
	// Validaci√≥n de entrada
	if id == "" {
		return errors.New("ID del libro es obligatorio")
	}

	// Delegar la eliminaci√≥n al repositorio
	return uc.bookRepo.Delete(id)
}

// UserUseCase contiene toda la l√≥gica de negocio relacionada con los usuarios
//
// üë§ Misma estructura que BookUseCase, pero para usuarios
// Esto demuestra el patr√≥n consistente en Clean Architecture
type UserUseCase struct {
	userRepo repository.UserRepository // Dependencia inyectada del repositorio
}

// NewUserUseCase constructor para UserUseCase
func NewUserUseCase(userRepo repository.UserRepository) *UserUseCase {
	return &UserUseCase{
		userRepo: userRepo,
	}
}

// CreateUser maneja toda la l√≥gica para crear un nuevo usuario
//
// üë§ L√≥gica espec√≠fica para usuarios:
// - Validar que el nombre no est√© vac√≠o
// - Validar que el email no est√© vac√≠o
// - En aplicaciones reales: validar formato de email, unicidad, etc.
func (uc *UserUseCase) CreateUser(name, email string) (*domain.User, error) {
	// Validaciones de reglas de negocio
	if name == "" {
		return nil, errors.New("el nombre del usuario es obligatorio")
	}
	if email == "" {
		return nil, errors.New("el email del usuario es obligatorio")
	}

	// TODO: En aplicaciones reales, aqu√≠ validar√≠as:
	// - Formato de email v√°lido
	// - Email √∫nico en el sistema
	// - Longitud m√≠nima del nombre
	// - Caracteres permitidos, etc.

	// Crear la entidad del dominio
	user := &domain.User{
		ID:    uuid.New().String(), // Generar ID √∫nico
		Name:  name,
		Email: email,
	}

	// Delegar la persistencia al repositorio
	return uc.userRepo.Create(user)
}

// GetUserByID obtiene un usuario por su ID
func (uc *UserUseCase) GetUserByID(id string) (*domain.User, error) {
	if id == "" {
		return nil, errors.New("ID del usuario es obligatorio")
	}
	return uc.userRepo.GetByID(id)
}

// GetAllUsers obtiene todos los usuarios disponibles
func (uc *UserUseCase) GetAllUsers() ([]*domain.User, error) {
	return uc.userRepo.GetAll()
}

// UpdateUser actualiza un usuario existente
func (uc *UserUseCase) UpdateUser(id, name, email string) (*domain.User, error) {
	// Validaciones de negocio
	if id == "" {
		return nil, errors.New("ID del usuario es obligatorio")
	}
	if name == "" {
		return nil, errors.New("el nombre del usuario es obligatorio")
	}
	if email == "" {
		return nil, errors.New("el email del usuario es obligatorio")
	}

	// Crear entidad con los datos actualizados
	user := &domain.User{
		ID:    id,
		Name:  name,
		Email: email,
	}

	// Delegar la actualizaci√≥n al repositorio
	return uc.userRepo.Update(user)
}

// DeleteUser elimina un usuario por su ID
func (uc *UserUseCase) DeleteUser(id string) error {
	if id == "" {
		return errors.New("ID del usuario es obligatorio")
	}
	return uc.userRepo.Delete(id)
}

// üí° CONSEJOS PARA PRINCIPIANTES:
//
// 1. üéØ Un caso de uso = Una operaci√≥n espec√≠fica del negocio
// 2. üìù Siempre validar entradas (nunca conf√≠es en datos externos)
// 3. üß† Piensa en las reglas de negocio, no en detalles t√©cnicos
// 4. üîß Usa inyecci√≥n de dependencias para mantener flexibilidad
// 5. ‚úÖ Retorna errores descriptivos que aporten valor al usuario
//
// üåü EJEMPLOS DE CASOS DE USO ADICIONALES QUE PODR√çAS AGREGAR:
// - SearchBooksByAuthor(author string) ([]*domain.Book, error)
// - GetBookStatistics() (*domain.BookStats, error)
// - LendBookToUser(bookID, userID string) error
// - GetUserBorrowedBooks(userID string) ([]*domain.Book, error)
//
// üö´ EJEMPLOS DE LO QUE NO DEBES PONER AQU√ç:
// - Detalles de HTTP (parsing JSON, status codes)
// - Detalles de base de datos (SQL queries, conexiones)
// - L√≥gica de presentaci√≥n (formateo de fechas, UI)
// - Dependencias de frameworks espec√≠ficos
//
// üéì PREGUNTA PARA REFLEXIONAR:
// Si quisi√©ramos exponer esta misma l√≥gica a trav√©s de una CLI
// en lugar de una API HTTP, ¬øtendr√≠amos que cambiar estos casos de uso?
// Respuesta: ¬°NO! Solo crear√≠amos nuevos handlers para CLI.
