package main

import (
	"log"

	"go-book-clean-architecture-api/internal/delivery/http"
	"go-book-clean-architecture-api/internal/infrastructure/memory"
	"go-book-clean-architecture-api/internal/routes"
	"go-book-clean-architecture-api/internal/usecase"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
)

func main() {
	// PASO 1: Crear la aplicaci√≥n Fiber
	// Fiber es nuestro framework web, pero est√° aislado en la capa de delivery
	app := fiber.New(fiber.Config{
		ErrorHandler: func(ctx *fiber.Ctx, err error) error {
			return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error": err.Error(),
			})
		},
	})

	// PASO 2: Configurar middleware b√°sico
	app.Use(logger.New()) // Logging de peticiones HTTP
	app.Use(cors.New())   // Habilitar CORS para peticiones desde el frontend

	// PASO 3: INYECCI√ìN DE DEPENDENCIAS - Aqu√≠ es donde ensamblamos toda la aplicaci√≥n
	// Esta es la parte m√°s importante de Clean Architecture

	// 3.1: Crear las implementaciones de los repositorios (capa de infraestructura)
	bookRepo := memory.NewInMemoryBookRepository() // Implementaci√≥n en memoria
	userRepo := memory.NewInMemoryUserRepository() // Implementaci√≥n en memoria

	// 3.2: Crear los casos de uso e inyectar los repositorios (capa de dominio/aplicaci√≥n)
	bookUseCase := usecase.NewBookUseCase(bookRepo) // Inyectar repositorio de libros
	userUseCase := usecase.NewUserUseCase(userRepo) // Inyectar repositorio de usuarios

	// 3.3: Crear los handlers e inyectar los casos de uso (capa de delivery)
	bookHandler := http.NewBookHandler(bookUseCase) // Inyectar caso de uso de libros
	userHandler := http.NewUserHandler(userUseCase) // Inyectar caso de uso de usuarios

	// PASO 4: Configurar las rutas
	routes.SetupRoutes(app, bookHandler, userHandler)

	// PASO 5: Iniciar el servidor
	log.Println("üöÄ Servidor iniciado en http://localhost:8080")
	log.Println("üìö Endpoints disponibles:")
	log.Println("  GET    /health           - Health check")
	log.Println("  POST   /api/books        - Crear libro")
	log.Println("  GET    /api/books        - Obtener todos los libros")
	log.Println("  GET    /api/books/:id    - Obtener libro por ID")
	log.Println("  PUT    /api/books/:id    - Actualizar libro")
	log.Println("  DELETE /api/books/:id    - Eliminar libro")
	log.Println("  POST   /api/users        - Crear usuario")
	log.Println("  GET    /api/users        - Obtener todos los usuarios")
	log.Println("  GET    /api/users/:id    - Obtener usuario por ID")
	log.Println("  PUT    /api/users/:id    - Actualizar usuario")
	log.Println("  DELETE /api/users/:id    - Eliminar usuario")

	// Iniciar el servidor en el puerto 8080
	if err := app.Listen(":8080"); err != nil {
		log.Fatal("Error al iniciar el servidor:", err)
	}
}

/*
EXPLICACI√ìN DEL FLUJO DE CLEAN ARCHITECTURE:

1. **Capa de Dominio (Domain)**:
   - Contiene las entidades principales (Book, User)
   - Define las reglas de negocio m√°s importantes
   - Es independiente de frameworks y librer√≠as externas

2. **Capa de Aplicaci√≥n/Casos de Uso (Use Cases)**:
   - Contiene la l√≥gica de negocio espec√≠fica de la aplicaci√≥n
   - Define las interfaces de los repositorios (contratos)
   - Orquesta las operaciones entre entidades

3. **Capa de Infraestructura (Infrastructure)**:
   - Implementa las interfaces definidas en casos de uso
   - Maneja la persistencia de datos (en este caso, en memoria)
   - Puede incluir conexiones a bases de datos, APIs externas, etc.

4. **Capa de Delivery/Interfaz (Delivery)**:
   - Maneja la comunicaci√≥n con el exterior (HTTP, CLI, gRPC, etc.)
   - Convierte peticiones externas en llamadas a casos de uso
   - Convierte respuestas de casos de uso en formatos externos

5. **Inyecci√≥n de Dependencias**:
   - Las dependencias fluyen hacia adentro (hacia el dominio)
   - Las capas externas dependen de las internas, nunca al rev√©s
   - Esto permite cambiar implementaciones sin afectar la l√≥gica de negocio

BENEFICIOS:
- ‚úÖ Testeable: Cada capa se puede testear independientemente
- ‚úÖ Mantenible: Cambios en una capa no afectan otras
- ‚úÖ Escalable: F√°cil agregar nuevas funcionalidades
- ‚úÖ Flexible: F√°cil cambiar frameworks, bases de datos, etc.
- ‚úÖ Independiente: La l√≥gica de negocio no depende de librer√≠as externas
*/
